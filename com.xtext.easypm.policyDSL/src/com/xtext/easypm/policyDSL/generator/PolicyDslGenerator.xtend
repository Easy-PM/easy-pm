/*
 * generated by Xtext 2.9.1
 */
package com.xtext.enseeiht.policyDSL.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.emf.common.util.URI

import machineModel.Machine
import com.xtext.enseeiht.policyDSL.policyDsl.State

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PolicyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		Resource.Factory.Registry.INSTANCE.extensionToFactoryMap.put("machinemodel", new XMIResourceFactoryImpl)
		val resourceSet = new ResourceSetImpl
    	val modelRessource = resourceSet.getResource(URI.createURI("platform:/resource/Test/default.machinemodel"), true)
		val machine = modelRessource.allContents.toIterable.filter(Machine).findFirst[true]
		
		fsa.generateFile('kmv.c', '''
		enum hw_ids {
			   	«FOR c : machine.components»
			   			«formatString(c.name)»,
			   	«ENDFOR»
		};
		
		«FOR c : machine.components»
		static struct hw_comp hw_«formatString(c.name)» = {
		        .name 	= "«c.name»",
		        .id		= «formatString(c.name)»,
		};
		
		«ENDFOR»
		
		«FOR st : resource.allContents.toIterable.filter(State)»
		static const struct  hw_state «st.name()»[] = {
			
		}
		«ENDFOR»
		'''
		)
	}
	
	/** 
	 * Lower case and underscore instead of space
	 */
	def formatString(String s) {
		'''«s.toLowerCase.replace(' ', '_').replace('(','').replace(')','')»''' 
	}
}
