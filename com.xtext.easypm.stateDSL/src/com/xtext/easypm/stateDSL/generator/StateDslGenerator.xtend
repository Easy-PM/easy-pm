/*
 * generated by Xtext 2.9.1
 */
package com.xtext.enseeiht.stateDSL.generator

import com.xtext.enseeiht.stateDSL.stateDsl.State
import com.xtext.enseeiht.stateDSL.stateDsl.StateDslPackage
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import machineModel.Machine

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StateDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		StateDslPackage.eINSTANCE.eClass()
		
		Resource.Factory.Registry.INSTANCE.extensionToFactoryMap.put("machinemodel", new XMIResourceFactoryImpl)
		val resourceSet = new ResourceSetImpl
    	val modelRessource = resourceSet.getResource(URI.createURI("platform:/resource/Test/default.machinemodel"), true)
		val machine = modelRessource.allContents.toIterable.filter(Machine).findFirst[true]
		
		
		//«IF st.components.removeIf()»
//					«ENDIF»
		fsa.generateFile('kmv.c', '''
			enum hw_ids {
				   	«FOR c : machine.components»
				   			«formatString(c.name)»,
				   	«ENDFOR»
			};
			
			«FOR c : machine.components»
			static struct hw_comp hw_«formatString(c.name)» = {
			    .name 	= "«c.name»",
			    .id		= «formatString(c.name)»,
			};
			
			«ENDFOR»
			
			«FOR st : resource.allContents.toIterable.filter(State)»
			static const struct  hw_state «st.name»[] = {
				«FOR c : st.components.sortBy[name]»
					«IF true»[«c.name»] = {«ENDIF»
						.hw	= «formatString(c.name)»,
						.attr {
							«IF c.attr.name == 'State'».power_state    = «IF c.attr.value == 'ON'»PCI_D0«ELSE»PCI_D3hot«ENDIF»,
							«ELSE»«c.attr.name»		= "«c.attr.value»",
							«ENDIF»
						}
					},
					
				«ENDFOR»
				
«««				«IF !st.components.filter(Ethernetcard).empty»
«««					[«st.components.filter(Ethernetcard).findFirst[true].name»] = {
«««					«FOR c : st.components.filter(Ethernetcard)»
«««						.hw				= &hw_«formatString(c.name)»,
«««						.power_state    = PCI_D3hot,
«««						//.attr {}
«««					«ENDFOR»
«««				«ENDIF»
«««					}
			}
			«ENDFOR»
		'''
		)
	
		fsa.generateFile('PolicyDsl.xtext', '''
			grammar com.xtext.enseeiht.policyDSL.PolicyDsl with org.eclipse.xtext.common.Terminals
			generate policyDsl "http://www.xtext.com/enseeiht/policyDSL/PolicyDsl" 

			Model returns Policy:
				'policy' name=ID '{'
					stateChanges+=stateChange*
				'}'
			;
				
			stateChange returns Transition:
				 source=State '=>' target=State 'when' action=(
			«FOR c : machine.components SEPARATOR '|'»«c.name.formatString»«ENDFOR»
			«IF !machine.applications.isEmpty»|«ENDIF»«FOR a : machine.applications»«a.name.formatString»«ENDFOR»)
			';';
			
			
			enum State:
				«FOR s: resource.allContents.toIterable.filter(State) SEPARATOR '|'» 
					«s.name» = '«s.name»'
	    		«ENDFOR»
			;

		   	«FOR c : machine.components»
			   	«c.name.formatString» returns Action:
			   		name='«c.name.formatString».' value=(«FOR e : c.events SEPARATOR '|'»'«e.name.formatString»'«ENDFOR»)
			   	;

		   	«ENDFOR»

			
		   	«FOR a : machine.applications»
				«a.name.formatString» returns Action:
					name='«a.name.formatString».' value=(«FOR f : a.functions SEPARATOR '|'»'«f.name.formatString»'«ENDFOR»)
					;

		   	«ENDFOR»

			'''
		)
	}
	
	
	def formatString(String s) {
		'''«s.toFirstUpper.replace(' ', '_').replace('(','').replace(')','')»'''
	}
	
}
